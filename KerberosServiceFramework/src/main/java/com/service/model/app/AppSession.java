package com.service.model.app;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.service.config.SessionConfig;

public class AppSession extends ClientSession{
	
	private String kerberosServiceSessionID;		//Session ID generated by kerberos for the app
	private List<UserSession> userSessions;
	
	public AppSession() {
		super();
		userSessions = new ArrayList<UserSession>();
		expiryTime = SessionConfig.getAppSessionExpiryTime();
	}
	/**
	 * @return the userSession
	 */
	public List<UserSession> getUserSession() {
		return userSessions;
	}
	/**
	 * @return the kerberosServiceSessionID
	 */
	public String getKerberosServiceSessionID() {
		return kerberosServiceSessionID;
	}
	/**
	 * @param kerberosServiceSessionID the kerberosServiceSessionID to set
	 */
	public void setKerberosServiceSessionID(String kerberosServiceSessionID) {
		this.kerberosServiceSessionID = kerberosServiceSessionID;
	}

	/**
	 * @param username
	 * @param userSessionID
	 * @return
	 */
	public UserSession createUserSession(String username, String userSessionID, String clientIP){
		
		UserSession userSession = new UserSession();
		userSession.setLoginName(username);
		userSession.setSessionID(userSessionID);
		userSession.setClientIP(clientIP);
		
		userSessions.add(userSession);
		
		return userSession;
	}
	
	/**
	 * @param username
	 * @return
	 */
	public UserSession findActiveUserSessionByUsername(String username){
		
		for(UserSession session: userSessions){
			if (session.getLoginName().equals(username) && session.isActive()){
				return session;
			}
		}
		return null;
	}
	
	/**
	 * @param sessionID
	 * @return
	 */
	public UserSession findActiveUserSessionBySessionID(String sessionID){
		
		for(UserSession session: userSessions){
			if (session.getSessionID().equals(sessionID)){
				if (session.isActive() && session.getExpiryTime().before(new Date()))
					session.setActive(false);
				if (session.isActive())
					return session;
			}
		}
		return null;
	}
	
	@Override
	public void setActive(boolean isActive) {
		super.setActive(isActive);
		if (!isActive){
			for (UserSession session : userSessions){
				session.setActive(false);
			}
		}
	}
}
